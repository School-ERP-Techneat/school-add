generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  code              String     @id
  name              String
  affiliationNumber String? // optional
  board             Board
  medium            Medium
  establishmentYear String? // optional
  schoolType        SchoolType
  contactEmail      String? // optional
  contactPhone      String? // optional
  website           String? // optional
  logoUrl           String? // optional
  address           Address    @relation(fields: [addressId], references: [id])
  addressId         String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Admin     Admin[]
  Teacher   Teacher[]
  Class     Class[]
  Batch     Batch[]
  Student   Student[]
}

model SchoolOwner {
  id         String @id @default(cuid())
  password   String
  email      String @unique
  schoolCode String @unique
  roleId     String
  role       Role   @relation(fields: [roleId], references: [id])
}

model Admin {
  id          String @id @default(cuid())
  username    String
  password    String
  designation String
  school      School @relation(fields: [schoolCode], references: [code])
  schoolCode  String
  role        Role   @relation(fields: [roleId], references: [id])
  roleId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([username, schoolCode])
}

model Teacher {
  id          String        @id @default(cuid())
  fullName    String
  email       String        @unique
  phone       String
  password    String
  designation String
  status      TeacherStatus @default(INACTIVE)

  roleId String?
  role   Role?   @relation(fields: [roleId], references: [id])

  school     School @relation(fields: [schoolCode], references: [code])
  schoolCode String

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Attendance    Attendance[]
  classSchedule ClassSchedule[]
  assignments   Assignment[]
  Section       Section?
}

model Student {
  id     String    @id @default(cuid())
  name   String
  dob    DateTime?
  gender Gender?

  email       String        @unique
  password    String
  phone       String?
  photo       String?
  admissionNo String        @unique
  aadhar      String?       @unique
  category    String?
  role        Role          @relation(fields: [roleId], references: [id])
  roleId      String
  section     Section       @relation(fields: [sectionId], references: [id])
  sectionId   String
  status      StudentStatus @default(INACTIVE)

  attendance  Attendance[]
  results     Result[]
  fees        Fee[]
  submissions Submission[]
  address     Address?     @relation(fields: [addressId], references: [id])
  addressId   String?      @unique

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  School     School   @relation(fields: [schoolCode], references: [code])
  schoolCode String
  Batch      Batch    @relation(fields: [batchId], references: [id])
  batchId    String
}

model Role {
  id          String   @id @default(cuid())
  name        RoleName @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admins      Admin[]
  Teacher     Teacher[]
  Student     Student[]
  schoolCode  String
  SchoolOwner SchoolOwner[]
}

model Address {
  id      String   @id @default(cuid())
  street  String?
  city    String
  state   String
  country String
  zipCode String
  schools School[]
  Student Student?
}

model Batch {
  id         String    @id @default(cuid())
  year       String // e.g., "2024-2025"
  startDate  DateTime
  endDate    DateTime
  classes    Class[]
  students   Student[]
  schoolCode String
  school     School    @relation(fields: [schoolCode], references: [code])
}

model Class {
  id            String          @id @default(cuid())
  name          String
  standard      Int
  school        School          @relation(fields: [schoolCode], references: [code])
  schoolCode    String
  sections      Section[]
  Exam          Exam[]
  ClassSchedule ClassSchedule[]
  Assignment    Assignment[]
  batch         Batch           @relation(fields: [batchId], references: [id])
  batchId       String
}

model Section {
  id             String          @id @default(cuid())
  name           String
  roomNo         String
  classTeacher   Teacher         @relation(fields: [classTeacherId], references: [id])
  classTeacherId String          @unique
  class          Class           @relation(fields: [classId], references: [id])
  classId        String
  students       Student[]
  Exam           Exam[]
  ClassSchedule  ClassSchedule[]
  Assignment     Assignment[]
  Attendance     Attendance[]
}

model Attendance {
  id     String           @id @default(cuid())
  date   DateTime
  status AttendanceStatus

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?

  @@unique([studentId, date]) // prevent duplicate attendance for a student per day
}

model Exam {
  id        String     @id @default(cuid())
  title     String
  date      DateTime
  syllabus  Syllabus[]
  class     Class      @relation(fields: [classId], references: [id])
  classId   String
  section   Section    @relation(fields: [sectionId], references: [id])
  sectionId String
  Result    Result[]
}

model Syllabus {
  id      String @id @default(cuid())
  subject String
  details String
  exam    Exam   @relation(fields: [examId], references: [id])
  examId  String
}

model ClassSchedule {
  id        String           @id @default(cuid())
  day       ClassScheduleDay
  period    Int
  subject   String
  teacher   Teacher          @relation(fields: [teacherId], references: [id])
  teacherId String
  class     Class            @relation(fields: [classId], references: [id])
  classId   String
  section   Section          @relation(fields: [sectionId], references: [id])
  sectionId String
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  details     String
  dueDate     DateTime
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  teacherId   String
  class       Class        @relation(fields: [classId], references: [id])
  classId     String
  section     Section      @relation(fields: [sectionId], references: [id])
  sectionId   String
  submissions Submission[]
}

model Submission {
  id           String     @id @default(cuid())
  fileUrl      String
  submittedAt  DateTime   @default(now())
  student      Student    @relation(fields: [studentId], references: [id])
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
}

model Result {
  id        String  @id @default(cuid())
  subject   String
  marks     Int
  total     Int
  grade     String
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  exam      Exam    @relation(fields: [examId], references: [id])
  examId    String
}

model Fee {
  id        String           @id @default(cuid())
  amount    Float
  dueDate   DateTime
  status    StudentFeeStatus
  student   Student          @relation(fields: [studentId], references: [id])
  studentId String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum Standard {
  First
  Second
  Third
  Fourth
  Fifth
  Sixth
}

enum Gender {
  Male
  Female
  Other
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  LEFT
  TRANSFERRED
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
}

enum Board {
  CBSE
  ICSE
  STATE
  IB
  CAMBRIDGE
}

enum Medium {
  English
  Hindi
  Regional
}

enum SchoolType {
  Private
  Government
  Aided
  International
}

enum RoleName {
  schoolOwner
  admin
  teacher
  student
}

enum AttendanceStatus {
  ABSENT
  PRESENT
  LEAVE
}

enum ClassScheduleDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum StudentFeeStatus {
  PENDING
  PAID
  OVERDUE
}
